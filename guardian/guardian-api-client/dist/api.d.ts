/**
 * Guardian
 * The Guardian is a modular open-source solution that includes best-in-class identity management and decentralized ledger technology (DLT) libraries. At the heart of the Guardian solution is a sophisticated Policy Workflow Engine (PWE) that enables applications to offer a requirements-based tokenization implementation.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@envisionblockchain.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    did?: string;
}
/**
 *
 * @export
 * @interface CommonSettings
 */
export interface CommonSettings {
    /**
     *
     * @type {string}
     * @memberof CommonSettings
     */
    operatorId?: string;
    /**
     *
     * @type {string}
     * @memberof CommonSettings
     */
    operatorKey?: string;
    /**
     *
     * @type {string}
     * @memberof CommonSettings
     */
    nftApiKey?: string;
}
/**
 *
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     *
     * @type {string}
     * @memberof Credentials
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof Credentials
     */
    password: string;
}
/**
 *
 * @export
 * @interface ExportPolicy
 */
export interface ExportPolicy {
    /**
     *
     * @type {string}
     * @memberof ExportPolicy
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ExportPolicy
     */
    version: string;
    /**
     *
     * @type {string}
     * @memberof ExportPolicy
     */
    tokens?: string;
}
/**
 *
 * @export
 * @interface ExportSchema
 */
export interface ExportSchema {
    /**
     *
     * @type {string}
     * @memberof ExportSchema
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ExportSchema
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ExportSchema
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface ExternalData
 */
export interface ExternalData {
    /**
     *
     * @type {string}
     * @memberof ExternalData
     */
    owner: string;
    /**
     *
     * @type {string}
     * @memberof ExternalData
     */
    policyTag: string;
    /**
     *
     * @type {object}
     * @memberof ExternalData
     */
    document: object;
}
/**
 *
 * @export
 * @interface HederaAccount
 */
export interface HederaAccount {
    /**
     *
     * @type {string}
     * @memberof HederaAccount
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof HederaAccount
     */
    key: string;
}
/**
 *
 * @export
 * @interface ImportSchema
 */
export interface ImportSchema {
    /**
     *
     * @type {Array<ImportSchemaSchemes>}
     * @memberof ImportSchema
     */
    schemes: Array<ImportSchemaSchemes>;
}
/**
 *
 * @export
 * @interface ImportSchemaSchemes
 */
export interface ImportSchemaSchemes {
    /**
     *
     * @type {string}
     * @memberof ImportSchemaSchemes
     */
    document: string;
    /**
     *
     * @type {string}
     * @memberof ImportSchemaSchemes
     */
    entity: string;
    /**
     *
     * @type {string}
     * @memberof ImportSchemaSchemes
     */
    hash?: string;
    /**
     *
     * @type {string}
     * @memberof ImportSchemaSchemes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ImportSchemaSchemes
     */
    uuid: string;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    version?: string;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     *
     * @type {string}
     * @memberof InlineObject2
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    policyVersion?: string;
}
/**
 *
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     *
     * @type {string}
     * @memberof InlineObject5
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     *
     * @type {string}
     * @memberof InlineObject6
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    id?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2001
     */
    totalCount?: number;
    /**
     *
     * @type {Log}
     * @memberof InlineResponse2001
     */
    logs?: Log;
}
/**
 *
 * @export
 * @interface Log
 */
export interface Log {
    /**
     *
     * @type {string}
     * @memberof Log
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof Log
     */
    datetime?: string;
    /**
     *
     * @type {string}
     * @memberof Log
     */
    message?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Log
     */
    attributes?: Array<string>;
}
/**
 *
 * @export
 * @interface LogFilters
 */
export interface LogFilters {
    /**
     *
     * @type {string}
     * @memberof LogFilters
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof LogFilters
     */
    startDate?: string;
    /**
     *
     * @type {string}
     * @memberof LogFilters
     */
    endDate?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof LogFilters
     */
    attributes?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof LogFilters
     */
    message?: string;
    /**
     *
     * @type {number}
     * @memberof LogFilters
     */
    pageSize?: number;
    /**
     *
     * @type {number}
     * @memberof LogFilters
     */
    pageIndex?: number;
    /**
     *
     * @type {string}
     * @memberof LogFilters
     */
    sortDirection?: LogFiltersSortDirectionEnum;
}
export declare const LogFiltersSortDirectionEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export declare type LogFiltersSortDirectionEnum = typeof LogFiltersSortDirectionEnum[keyof typeof LogFiltersSortDirectionEnum];
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 *
 * @export
 * @interface PolicyBlock
 */
export interface PolicyBlock {
    /**
     *
     * @type {string}
     * @memberof PolicyBlock
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof PolicyBlock
     */
    blockType: string;
    /**
     *
     * @type {boolean}
     * @memberof PolicyBlock
     */
    isActive: boolean;
    /**
     *
     * @type {object}
     * @memberof PolicyBlock
     */
    uiMetaData: object;
    /**
     *
     * @type {Array<object>}
     * @memberof PolicyBlock
     */
    blocks?: Array<object>;
}
/**
 *
 * @export
 * @interface PolicyBlockData
 */
export interface PolicyBlockData {
    /**
     *
     * @type {string}
     * @memberof PolicyBlockData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof PolicyBlockData
     */
    blockType?: string;
    /**
     *
     * @type {boolean}
     * @memberof PolicyBlockData
     */
    isActive: boolean;
    /**
     *
     * @type {object}
     * @memberof PolicyBlockData
     */
    uiMetaData: object;
    /**
     *
     * @type {object}
     * @memberof PolicyBlockData
     */
    data: object;
    /**
     *
     * @type {Array<object>}
     * @memberof PolicyBlockData
     */
    fields?: Array<object>;
    /**
     *
     * @type {number}
     * @memberof PolicyBlockData
     */
    index?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof PolicyBlockData
     */
    roles?: Array<string>;
    /**
     *
     * @type {Array<PolicyBlock>}
     * @memberof PolicyBlockData
     */
    blocks?: Array<PolicyBlock>;
}
/**
 *
 * @export
 * @interface PolicyConfig
 */
export interface PolicyConfig {
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    version: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    topicDescription: string;
    /**
     *
     * @type {object}
     * @memberof PolicyConfig
     */
    config: object;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    owner?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof PolicyConfig
     */
    policyRoles?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    topicId: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfig
     */
    policyTag: string;
    /**
     *
     * @type {Array<PolicyConfigPolicyTopics>}
     * @memberof PolicyConfig
     */
    policyTopics?: Array<PolicyConfigPolicyTopics>;
}
/**
 *
 * @export
 * @interface PolicyConfigPolicyTopics
 */
export interface PolicyConfigPolicyTopics {
    /**
     *
     * @type {string}
     * @memberof PolicyConfigPolicyTopics
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfigPolicyTopics
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof PolicyConfigPolicyTopics
     */
    type?: string;
    /**
     *
     * @type {boolean}
     * @memberof PolicyConfigPolicyTopics
     */
    static?: boolean;
}
/**
 *
 * @export
 * @interface PreviewPolicy
 */
export interface PreviewPolicy {
    /**
     *
     * @type {object}
     * @memberof PreviewPolicy
     */
    policy: object;
    /**
     *
     * @type {Array<object>}
     * @memberof PreviewPolicy
     */
    schemas: Array<object>;
    /**
     *
     * @type {Array<object>}
     * @memberof PreviewPolicy
     */
    tokens: Array<object>;
}
/**
 *
 * @export
 * @interface PublishPolicy
 */
export interface PublishPolicy {
    /**
     *
     * @type {Array<object>}
     * @memberof PublishPolicy
     */
    errors: Array<object>;
    /**
     *
     * @type {boolean}
     * @memberof PublishPolicy
     */
    isValid: boolean;
    /**
     *
     * @type {Array<object>}
     * @memberof PublishPolicy
     */
    policies: Array<object>;
}
/**
 *
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    iri?: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    entity: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    hash?: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    document: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    topicId?: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof Schema
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface Session
 */
export interface Session {
    /**
     *
     * @type {string}
     * @memberof Session
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    accessToken: string;
}
/**
 *
 * @export
 * @interface Token
 */
export interface Token {
    /**
     *
     * @type {boolean}
     * @memberof Token
     */
    changeSupply: boolean;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    decimals: string;
    /**
     *
     * @type {boolean}
     * @memberof Token
     */
    enableAdmin: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Token
     */
    enableFreeze: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Token
     */
    enableKYC: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Token
     */
    enableWipe: boolean;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    initialSupply: string;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    tokenName: string;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    tokenSymbol: string;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    tokenType: string;
}
/**
 *
 * @export
 * @interface TokenInfo
 */
export interface TokenInfo {
    /**
     *
     * @type {string}
     * @memberof TokenInfo
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof TokenInfo
     */
    tokenId: string;
    /**
     *
     * @type {string}
     * @memberof TokenInfo
     */
    tokenName: string;
    /**
     *
     * @type {string}
     * @memberof TokenInfo
     */
    tokenSymbol: string;
    /**
     *
     * @type {string}
     * @memberof TokenInfo
     */
    tokenType: string;
    /**
     *
     * @type {string}
     * @memberof TokenInfo
     */
    decimals: string;
    /**
     *
     * @type {boolean}
     * @memberof TokenInfo
     */
    associated: boolean;
    /**
     *
     * @type {string}
     * @memberof TokenInfo
     */
    balance: string;
    /**
     *
     * @type {boolean}
     * @memberof TokenInfo
     */
    frozen: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TokenInfo
     */
    kyc: boolean;
}
/**
 *
 * @export
 * @interface TrustChains
 */
export interface TrustChains {
    /**
     *
     * @type {Array<TrustChainsChain>}
     * @memberof TrustChains
     */
    chain: Array<TrustChainsChain>;
    /**
     *
     * @type {Array<TrustChainsUserMap>}
     * @memberof TrustChains
     */
    userMap: Array<TrustChainsUserMap>;
}
/**
 *
 * @export
 * @interface TrustChainsChain
 */
export interface TrustChainsChain {
    /**
     *
     * @type {string}
     * @memberof TrustChainsChain
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof TrustChainsChain
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof TrustChainsChain
     */
    tag: string;
    /**
     *
     * @type {string}
     * @memberof TrustChainsChain
     */
    label: string;
    /**
     *
     * @type {string}
     * @memberof TrustChainsChain
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof TrustChainsChain
     */
    owner: string;
    /**
     *
     * @type {object}
     * @memberof TrustChainsChain
     */
    document: object;
}
/**
 *
 * @export
 * @interface TrustChainsUserMap
 */
export interface TrustChainsUserMap {
    /**
     *
     * @type {string}
     * @memberof TrustChainsUserMap
     */
    did: string;
    /**
     *
     * @type {string}
     * @memberof TrustChainsUserMap
     */
    username: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    confirmed?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    failed?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    hederaAccountId?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    hederaAccountKey?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    did?: string;
    /**
     *
     * @type {object}
     * @memberof User
     */
    didDocument?: object;
    /**
     *
     * @type {object}
     * @memberof User
     */
    vcDocument?: object;
    /**
     *
     * @type {string}
     * @memberof User
     */
    parent?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    topicId?: string;
}
/**
 *
 * @export
 * @interface ValidatePolicy
 */
export interface ValidatePolicy {
    /**
     *
     * @type {object}
     * @memberof ValidatePolicy
     */
    config: object;
    /**
     *
     * @type {object}
     * @memberof ValidatePolicy
     */
    results: object;
}
/**
 *
 * @export
 * @interface VerifiablePresentation
 */
export interface VerifiablePresentation {
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    hash: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    policyId: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    signature: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    tag: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    updateDate: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    createDate: string;
    /**
     *
     * @type {string}
     * @memberof VerifiablePresentation
     */
    owner: string;
    /**
     *
     * @type {object}
     * @memberof VerifiablePresentation
     */
    document: object;
}
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export declare const AccountsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns all users except those with roles Root Authority and Auditor. Only users with the Root Authority role are allowed to make the request.
     * @summary Returns a list of users, excluding Root Authority and Auditors.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Logs user into the system.
     * @param {Credentials} credentials Object that contains username and password fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsLoginPost: (credentials: Credentials, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Registers a new user account.
     * @param {Credentials} credentials Object that contain username, password and role (optional) fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRegisterPost: (credentials: Credentials, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all root authorities.
     * @summary Returns all root authorities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRootAuthoritiesGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns current user session.
     * @summary Returns current session of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsSessionGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
export declare const AccountsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns all users except those with roles Root Authority and Auditor. Only users with the Root Authority role are allowed to make the request.
     * @summary Returns a list of users, excluding Root Authority and Auditors.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Account>>>;
    /**
     *
     * @summary Logs user into the system.
     * @param {Credentials} credentials Object that contains username and password fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsLoginPost(credentials: Credentials, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Session>>;
    /**
     *
     * @summary Registers a new user account.
     * @param {Credentials} credentials Object that contain username, password and role (optional) fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRegisterPost(credentials: Credentials, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Account>>;
    /**
     * Returns all root authorities.
     * @summary Returns all root authorities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRootAuthoritiesGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Account>>>;
    /**
     * Returns current user session.
     * @summary Returns current session of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsSessionGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Session>>;
};
/**
 * AccountsApi - factory interface
 * @export
 */
export declare const AccountsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns all users except those with roles Root Authority and Auditor. Only users with the Root Authority role are allowed to make the request.
     * @summary Returns a list of users, excluding Root Authority and Auditors.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsGet(options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Logs user into the system.
     * @param {Credentials} credentials Object that contains username and password fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsLoginPost(credentials: Credentials, options?: any): AxiosPromise<Session>;
    /**
     *
     * @summary Registers a new user account.
     * @param {Credentials} credentials Object that contain username, password and role (optional) fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRegisterPost(credentials: Credentials, options?: any): AxiosPromise<Account>;
    /**
     * Returns all root authorities.
     * @summary Returns all root authorities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRootAuthoritiesGet(options?: any): AxiosPromise<Array<Account>>;
    /**
     * Returns current user session.
     * @summary Returns current session of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsSessionGet(options?: any): AxiosPromise<Session>;
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export declare class AccountsApi extends BaseAPI {
    /**
     * Returns all users except those with roles Root Authority and Auditor. Only users with the Root Authority role are allowed to make the request.
     * @summary Returns a list of users, excluding Root Authority and Auditors.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account[], any>>;
    /**
     *
     * @summary Logs user into the system.
     * @param {Credentials} credentials Object that contains username and password fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsLoginPost(credentials: Credentials, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Session, any>>;
    /**
     *
     * @summary Registers a new user account.
     * @param {Credentials} credentials Object that contain username, password and role (optional) fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsRegisterPost(credentials: Credentials, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account, any>>;
    /**
     * Returns all root authorities.
     * @summary Returns all root authorities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsRootAuthoritiesGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account[], any>>;
    /**
     * Returns current user session.
     * @summary Returns current session of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsSessionGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Session, any>>;
}
/**
 * DemoApi - axios parameter creator
 * @export
 */
export declare const DemoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Generates a new Hedera account with a random private key.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    demoRandomKeyGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all registered user accounts.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    demoRegisteredUsersGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DemoApi - functional programming interface
 * @export
 */
export declare const DemoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Generates a new Hedera account with a random private key.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    demoRandomKeyGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HederaAccount>>;
    /**
     * Returns all registered user accounts.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    demoRegisteredUsersGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Account & object>>>;
};
/**
 * DemoApi - factory interface
 * @export
 */
export declare const DemoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Generates a new Hedera account with a random private key.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    demoRandomKeyGet(options?: any): AxiosPromise<HederaAccount>;
    /**
     * Returns all registered user accounts.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    demoRegisteredUsersGet(options?: any): AxiosPromise<Array<Account & object>>;
};
/**
 * DemoApi - object-oriented interface
 * @export
 * @class DemoApi
 * @extends {BaseAPI}
 */
export declare class DemoApi extends BaseAPI {
    /**
     * Generates a new Hedera account with a random private key.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    demoRandomKeyGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HederaAccount, any>>;
    /**
     * Returns all registered user accounts.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    demoRegisteredUsersGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<(Account & object)[], any>>;
}
/**
 * ExternalApi - axios parameter creator
 * @export
 */
export declare const ExternalApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sends data from an external source.
     * @summary Sends data from an external source.
     * @param {ExternalData} externalData Object that contains a VC Document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalPost: (externalData: ExternalData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExternalApi - functional programming interface
 * @export
 */
export declare const ExternalApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sends data from an external source.
     * @summary Sends data from an external source.
     * @param {ExternalData} externalData Object that contains a VC Document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalPost(externalData: ExternalData, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ExternalApi - factory interface
 * @export
 */
export declare const ExternalApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sends data from an external source.
     * @summary Sends data from an external source.
     * @param {ExternalData} externalData Object that contains a VC Document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalPost(externalData: ExternalData, options?: any): AxiosPromise<void>;
};
/**
 * ExternalApi - object-oriented interface
 * @export
 * @class ExternalApi
 * @extends {BaseAPI}
 */
export declare class ExternalApi extends BaseAPI {
    /**
     * Sends data from an external source.
     * @summary Sends data from an external source.
     * @param {ExternalData} externalData Object that contains a VC Document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    externalPost(externalData: ExternalData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * IpfsApi - axios parameter creator
 * @export
 */
export declare const IpfsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Add file to ipfs.
     * @summary Add file to ipfs.
     * @param {any} body Data array of file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipfsFilePost: (body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IpfsApi - functional programming interface
 * @export
 */
export declare const IpfsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Add file to ipfs.
     * @summary Add file to ipfs.
     * @param {any} body Data array of file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipfsFilePost(body: any, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
};
/**
 * IpfsApi - factory interface
 * @export
 */
export declare const IpfsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Add file to ipfs.
     * @summary Add file to ipfs.
     * @param {any} body Data array of file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipfsFilePost(body: any, options?: any): AxiosPromise<string>;
};
/**
 * IpfsApi - object-oriented interface
 * @export
 * @class IpfsApi
 * @extends {BaseAPI}
 */
export declare class IpfsApi extends BaseAPI {
    /**
     * Add file to ipfs.
     * @summary Add file to ipfs.
     * @param {any} body Data array of file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IpfsApi
     */
    ipfsFilePost(body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * LogsApi - axios parameter creator
 * @export
 */
export declare const LogsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns logs attributes. For users with the Root Authority role only.
     * @summary Returns logs attributes.
     * @param {string} [name] Part of name.
     * @param {Array<string>} [existingAttributes] Attributes to exclude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsAttributesGet: (name?: string | undefined, existingAttributes?: string[] | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns logs. For users with the Root Authority role only.
     * @summary Returns logs.
     * @param {LogFilters} [logFilters] Log filters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsPost: (logFilters?: LogFilters | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LogsApi - functional programming interface
 * @export
 */
export declare const LogsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns logs attributes. For users with the Root Authority role only.
     * @summary Returns logs attributes.
     * @param {string} [name] Part of name.
     * @param {Array<string>} [existingAttributes] Attributes to exclude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsAttributesGet(name?: string | undefined, existingAttributes?: string[] | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<string>>>;
    /**
     * Returns logs. For users with the Root Authority role only.
     * @summary Returns logs.
     * @param {LogFilters} [logFilters] Log filters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsPost(logFilters?: LogFilters | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2001>>;
};
/**
 * LogsApi - factory interface
 * @export
 */
export declare const LogsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns logs attributes. For users with the Root Authority role only.
     * @summary Returns logs attributes.
     * @param {string} [name] Part of name.
     * @param {Array<string>} [existingAttributes] Attributes to exclude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsAttributesGet(name?: string | undefined, existingAttributes?: string[] | undefined, options?: any): AxiosPromise<Array<string>>;
    /**
     * Returns logs. For users with the Root Authority role only.
     * @summary Returns logs.
     * @param {LogFilters} [logFilters] Log filters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsPost(logFilters?: LogFilters | undefined, options?: any): AxiosPromise<InlineResponse2001>;
};
/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export declare class LogsApi extends BaseAPI {
    /**
     * Returns logs attributes. For users with the Root Authority role only.
     * @summary Returns logs attributes.
     * @param {string} [name] Part of name.
     * @param {Array<string>} [existingAttributes] Attributes to exclude.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    logsAttributesGet(name?: string, existingAttributes?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Returns logs. For users with the Root Authority role only.
     * @summary Returns logs.
     * @param {LogFilters} [logFilters] Log filters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    logsPost(logFilters?: LogFilters, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InlineResponse2001, any>>;
}
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export declare const PoliciesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns all policies. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Return a list of all policies.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesGet: (pageIndex?: number | undefined, pageSize?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports new policy and all associated artifacts, such as schemas and VCs, from the provided zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportFilePost: (body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Previews the policy from a zip file without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportFilePreviewPost: (body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports new policy and all associated artifacts from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from IPFS.
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportMessagePost: (inlineObject5: InlineObject5, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Previews the policy from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from IPFS.
     * @param {InlineObject6} inlineObject6
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportMessagePreviewPost: (inlineObject6: InlineObject6, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns data from the root policy block. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Retrieves data for the policy root block.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksGet: (policyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requests block data. Only users with a role that described in block are allowed to make the request.
     * @summary Requests block data.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksUuidGet: (policyId: string, uuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sends data to the specified block.
     * @summary Sends data to the specified block.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {object} body Object with the data to be sent to the block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksUuidPost: (policyId: string, uuid: string, body: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a zip file containing the published policy and all associated artifacts, i.e. schemas and VCs. Only users with the Root Authority role are allowed to make the request.
     * @summary Return policy and its artifacts in a zip file format for the specified policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdExportFileGet: (policyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the Hedera message ID for the specified policy published onto IPFS. Only users with the Root Authority role are allowed to make the request.
     * @summary Return Heder message ID for the specified published policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdExportMessageGet: (policyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Retrieves policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdGet: (policyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Publishes the policy with the specified (internal) policy ID onto IPFS, sends a message featuring its IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the policy onto IPFS.
     * @param {string} policyId Selected policy ID.
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPublishPut: (policyId: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPut: (policyId: string, policyConfig: PolicyConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requests block ID from a policy by tag. Only users with the Root Authority and Installer roles are allowed to make the request.
     * @summary Requests block ID from a policy by tag.
     * @param {string} policyId Selected policy ID.
     * @param {string} tag Tag from the selected policy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdTagTagGet: (policyId: string, tag: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPost: (policyConfig: PolicyConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validates selected policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Validates policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesValidatePost: (policyConfig: PolicyConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PoliciesApi - functional programming interface
 * @export
 */
export declare const PoliciesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns all policies. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Return a list of all policies.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesGet(pageIndex?: number | undefined, pageSize?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<PolicyConfig & object>>>;
    /**
     * Imports new policy and all associated artifacts, such as schemas and VCs, from the provided zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportFilePost(body: any, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<PolicyConfig>>>;
    /**
     * Previews the policy from a zip file without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportFilePreviewPost(body: any, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PreviewPolicy>>;
    /**
     * Imports new policy and all associated artifacts from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from IPFS.
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportMessagePost(inlineObject5: InlineObject5, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<PolicyConfig>>>;
    /**
     * Previews the policy from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from IPFS.
     * @param {InlineObject6} inlineObject6
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportMessagePreviewPost(inlineObject6: InlineObject6, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PreviewPolicy>>;
    /**
     * Returns data from the root policy block. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Retrieves data for the policy root block.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksGet(policyId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PolicyBlock>>;
    /**
     * Requests block data. Only users with a role that described in block are allowed to make the request.
     * @summary Requests block data.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksUuidGet(policyId: string, uuid: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PolicyBlockData>>;
    /**
     * Sends data to the specified block.
     * @summary Sends data to the specified block.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {object} body Object with the data to be sent to the block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksUuidPost(policyId: string, uuid: string, body: object, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Returns a zip file containing the published policy and all associated artifacts, i.e. schemas and VCs. Only users with the Root Authority role are allowed to make the request.
     * @summary Return policy and its artifacts in a zip file format for the specified policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdExportFileGet(policyId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ExportPolicy>>;
    /**
     * Returns the Hedera message ID for the specified policy published onto IPFS. Only users with the Root Authority role are allowed to make the request.
     * @summary Return Heder message ID for the specified published policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdExportMessageGet(policyId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ExportPolicy>>;
    /**
     * Retrieves policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Retrieves policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdGet(policyId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PolicyConfig & object>>;
    /**
     * Publishes the policy with the specified (internal) policy ID onto IPFS, sends a message featuring its IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the policy onto IPFS.
     * @param {string} policyId Selected policy ID.
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPublishPut(policyId: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PublishPolicy>>;
    /**
     * Updates policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPut(policyId: string, policyConfig: PolicyConfig, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PolicyConfig>>;
    /**
     * Requests block ID from a policy by tag. Only users with the Root Authority and Installer roles are allowed to make the request.
     * @summary Requests block ID from a policy by tag.
     * @param {string} policyId Selected policy ID.
     * @param {string} tag Tag from the selected policy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdTagTagGet(policyId: string, tag: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse200>>;
    /**
     * Creates a new policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPost(policyConfig: PolicyConfig, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Validates selected policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Validates policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesValidatePost(policyConfig: PolicyConfig, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ValidatePolicy>>;
};
/**
 * PoliciesApi - factory interface
 * @export
 */
export declare const PoliciesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns all policies. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Return a list of all policies.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesGet(pageIndex?: number | undefined, pageSize?: number | undefined, options?: any): AxiosPromise<Array<PolicyConfig & object>>;
    /**
     * Imports new policy and all associated artifacts, such as schemas and VCs, from the provided zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportFilePost(body: any, options?: any): AxiosPromise<Array<PolicyConfig>>;
    /**
     * Previews the policy from a zip file without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportFilePreviewPost(body: any, options?: any): AxiosPromise<PreviewPolicy>;
    /**
     * Imports new policy and all associated artifacts from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from IPFS.
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportMessagePost(inlineObject5: InlineObject5, options?: any): AxiosPromise<Array<PolicyConfig>>;
    /**
     * Previews the policy from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from IPFS.
     * @param {InlineObject6} inlineObject6
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesImportMessagePreviewPost(inlineObject6: InlineObject6, options?: any): AxiosPromise<PreviewPolicy>;
    /**
     * Returns data from the root policy block. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Retrieves data for the policy root block.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksGet(policyId: string, options?: any): AxiosPromise<PolicyBlock>;
    /**
     * Requests block data. Only users with a role that described in block are allowed to make the request.
     * @summary Requests block data.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksUuidGet(policyId: string, uuid: string, options?: any): AxiosPromise<PolicyBlockData>;
    /**
     * Sends data to the specified block.
     * @summary Sends data to the specified block.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {object} body Object with the data to be sent to the block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdBlocksUuidPost(policyId: string, uuid: string, body: object, options?: any): AxiosPromise<void>;
    /**
     * Returns a zip file containing the published policy and all associated artifacts, i.e. schemas and VCs. Only users with the Root Authority role are allowed to make the request.
     * @summary Return policy and its artifacts in a zip file format for the specified policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdExportFileGet(policyId: string, options?: any): AxiosPromise<ExportPolicy>;
    /**
     * Returns the Hedera message ID for the specified policy published onto IPFS. Only users with the Root Authority role are allowed to make the request.
     * @summary Return Heder message ID for the specified published policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdExportMessageGet(policyId: string, options?: any): AxiosPromise<ExportPolicy>;
    /**
     * Retrieves policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Retrieves policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdGet(policyId: string, options?: any): AxiosPromise<PolicyConfig & object>;
    /**
     * Publishes the policy with the specified (internal) policy ID onto IPFS, sends a message featuring its IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the policy onto IPFS.
     * @param {string} policyId Selected policy ID.
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPublishPut(policyId: string, inlineObject4: InlineObject4, options?: any): AxiosPromise<PublishPolicy>;
    /**
     * Updates policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPut(policyId: string, policyConfig: PolicyConfig, options?: any): AxiosPromise<PolicyConfig>;
    /**
     * Requests block ID from a policy by tag. Only users with the Root Authority and Installer roles are allowed to make the request.
     * @summary Requests block ID from a policy by tag.
     * @param {string} policyId Selected policy ID.
     * @param {string} tag Tag from the selected policy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdTagTagGet(policyId: string, tag: string, options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Creates a new policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPost(policyConfig: PolicyConfig, options?: any): AxiosPromise<void>;
    /**
     * Validates selected policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Validates policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesValidatePost(policyConfig: PolicyConfig, options?: any): AxiosPromise<ValidatePolicy>;
};
/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export declare class PoliciesApi extends BaseAPI {
    /**
     * Returns all policies. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Return a list of all policies.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesGet(pageIndex?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<(PolicyConfig & object)[], any>>;
    /**
     * Imports new policy and all associated artifacts, such as schemas and VCs, from the provided zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesImportFilePost(body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PolicyConfig[], any>>;
    /**
     * Previews the policy from a zip file without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from a zip file.
     * @param {any} body A zip file that contains the policy and associated schemas and VCs to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesImportFilePreviewPost(body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PreviewPolicy, any>>;
    /**
     * Imports new policy and all associated artifacts from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new policy from IPFS.
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesImportMessagePost(inlineObject5: InlineObject5, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PolicyConfig[], any>>;
    /**
     * Previews the policy from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Policy preview from IPFS.
     * @param {InlineObject6} inlineObject6
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesImportMessagePreviewPost(inlineObject6: InlineObject6, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PreviewPolicy, any>>;
    /**
     * Returns data from the root policy block. Only users with the Root Authority and Installer role are allowed to make the request.
     * @summary Retrieves data for the policy root block.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdBlocksGet(policyId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PolicyBlock, any>>;
    /**
     * Requests block data. Only users with a role that described in block are allowed to make the request.
     * @summary Requests block data.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdBlocksUuidGet(policyId: string, uuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PolicyBlockData, any>>;
    /**
     * Sends data to the specified block.
     * @summary Sends data to the specified block.
     * @param {string} policyId Selected policy ID.
     * @param {string} uuid Selected block UUID.
     * @param {object} body Object with the data to be sent to the block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdBlocksUuidPost(policyId: string, uuid: string, body: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a zip file containing the published policy and all associated artifacts, i.e. schemas and VCs. Only users with the Root Authority role are allowed to make the request.
     * @summary Return policy and its artifacts in a zip file format for the specified policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdExportFileGet(policyId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportPolicy, any>>;
    /**
     * Returns the Hedera message ID for the specified policy published onto IPFS. Only users with the Root Authority role are allowed to make the request.
     * @summary Return Heder message ID for the specified published policy.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdExportMessageGet(policyId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportPolicy, any>>;
    /**
     * Retrieves policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Retrieves policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdGet(policyId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PolicyConfig & object, any>>;
    /**
     * Publishes the policy with the specified (internal) policy ID onto IPFS, sends a message featuring its IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the policy onto IPFS.
     * @param {string} policyId Selected policy ID.
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdPublishPut(policyId: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PublishPolicy, any>>;
    /**
     * Updates policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates policy configuration.
     * @param {string} policyId Selected policy ID.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdPut(policyId: string, policyConfig: PolicyConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PolicyConfig, any>>;
    /**
     * Requests block ID from a policy by tag. Only users with the Root Authority and Installer roles are allowed to make the request.
     * @summary Requests block ID from a policy by tag.
     * @param {string} policyId Selected policy ID.
     * @param {string} tag Tag from the selected policy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdTagTagGet(policyId: string, tag: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InlineResponse200, any>>;
    /**
     * Creates a new policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPost(policyConfig: PolicyConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Validates selected policy. Only users with the Root Authority role are allowed to make the request.
     * @summary Validates policy.
     * @param {PolicyConfig} policyConfig Object that contains policy configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesValidatePost(policyConfig: PolicyConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ValidatePolicy, any>>;
}
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export declare const ProfilesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Requests Hedera account balance. Only users with the Installer role are allowed to make the request.
     * @summary Returns user\'s Hedera account balance.
     * @param {string} username The name of the user for whom to fetch the balance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernameBalanceGet: (username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns user account information. For users with the Root Authority role it also returns address book and VC document information.
     * @summary Returns user account info.
     * @param {string} username The name of the user for whom to fetch the information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernameGet: (username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets Hedera credentials for the user. For users with the Root Authority role it also creates an address book.
     * @summary Sets Hedera credentials for the user.
     * @param {string} username The name of the user for whom to update the information.
     * @param {User} user Object that contains the Hedera account data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernamePut: (username: string, user: User, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProfilesApi - functional programming interface
 * @export
 */
export declare const ProfilesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Requests Hedera account balance. Only users with the Installer role are allowed to make the request.
     * @summary Returns user\'s Hedera account balance.
     * @param {string} username The name of the user for whom to fetch the balance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernameBalanceGet(username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
    /**
     * Returns user account information. For users with the Root Authority role it also returns address book and VC document information.
     * @summary Returns user account info.
     * @param {string} username The name of the user for whom to fetch the information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernameGet(username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>>;
    /**
     * Sets Hedera credentials for the user. For users with the Root Authority role it also creates an address book.
     * @summary Sets Hedera credentials for the user.
     * @param {string} username The name of the user for whom to update the information.
     * @param {User} user Object that contains the Hedera account data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernamePut(username: string, user: User, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ProfilesApi - factory interface
 * @export
 */
export declare const ProfilesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Requests Hedera account balance. Only users with the Installer role are allowed to make the request.
     * @summary Returns user\'s Hedera account balance.
     * @param {string} username The name of the user for whom to fetch the balance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernameBalanceGet(username: string, options?: any): AxiosPromise<string>;
    /**
     * Returns user account information. For users with the Root Authority role it also returns address book and VC document information.
     * @summary Returns user account info.
     * @param {string} username The name of the user for whom to fetch the information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernameGet(username: string, options?: any): AxiosPromise<User>;
    /**
     * Sets Hedera credentials for the user. For users with the Root Authority role it also creates an address book.
     * @summary Sets Hedera credentials for the user.
     * @param {string} username The name of the user for whom to update the information.
     * @param {User} user Object that contains the Hedera account data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesUsernamePut(username: string, user: User, options?: any): AxiosPromise<void>;
};
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export declare class ProfilesApi extends BaseAPI {
    /**
     * Requests Hedera account balance. Only users with the Installer role are allowed to make the request.
     * @summary Returns user\'s Hedera account balance.
     * @param {string} username The name of the user for whom to fetch the balance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    profilesUsernameBalanceGet(username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Returns user account information. For users with the Root Authority role it also returns address book and VC document information.
     * @summary Returns user account info.
     * @param {string} username The name of the user for whom to fetch the information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    profilesUsernameGet(username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * Sets Hedera credentials for the user. For users with the Root Authority role it also creates an address book.
     * @summary Sets Hedera credentials for the user.
     * @param {string} username The name of the user for whom to update the information.
     * @param {User} user Object that contains the Hedera account data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    profilesUsernamePut(username: string, user: User, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SchemasApi - axios parameter creator
 * @export
 */
export declare const SchemasApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns all schemas.
     * @summary Returns all schemas.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasGet: (pageIndex?: number | undefined, pageSize?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasImportFilePost: (body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Previews the schema from a zip file. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from a zip file.
     * @param {any} body A zip file containing the schema to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasImportFilePreviewPost: (body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasImportMessagePost: (inlineObject1: InlineObject1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Previews the schema from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from IPFS.
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasImportMessagePreviewPost: (inlineObject3: InlineObject3, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasPost: (schema: Schema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Deletes the schema.
     * @param {string} schemaId Schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdDelete: (schemaId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns schema files for the schemas. Only users with the Root Authority role are allowed to make the request.
     * @summary Return zip file with schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdExportFilePost: (schemaId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns Hedera message IDs of the published schemas, these messages contain IPFS CIDs of these schema files. Only users with the Root Authority role are allowed to make the request.
     * @summary List Hedera message IDs of published schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdExportMessagePost: (schemaId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Publishes the schema with the provided (internal) schema ID onto IPFS, sends a message featuring IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the schema.
     * @param {string} schemaId Schema ID.
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdPublishPut: (schemaId: string, inlineObject: InlineObject, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates the schema.
     * @param {string} schemaId Schema ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdPut: (schemaId: string, schema: Schema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all schemas by topicId.
     * @summary Returns all schemas by topicId.
     * @param {string} topicId Topic ID.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdGet: (topicId: string, pageIndex?: number | undefined, pageSize?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {string} topicId Topic ID.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdImportFilePost: (topicId: string, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {string} topicId Topic ID.
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdImportMessagePost: (topicId: string, inlineObject2: InlineObject2, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {string} topicId Topic ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdPost: (topicId: string, schema: Schema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SchemasApi - functional programming interface
 * @export
 */
export declare const SchemasApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns all schemas.
     * @summary Returns all schemas.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasGet(pageIndex?: number | undefined, pageSize?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasImportFilePost(body: any, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Previews the schema from a zip file. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from a zip file.
     * @param {any} body A zip file containing the schema to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasImportFilePreviewPost(body: any, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasImportMessagePost(inlineObject1: InlineObject1, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Previews the schema from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from IPFS.
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasImportMessagePreviewPost(inlineObject3: InlineObject3, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasPost(schema: Schema, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Deletes the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Deletes the schema.
     * @param {string} schemaId Schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdDelete(schemaId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Returns schema files for the schemas. Only users with the Root Authority role are allowed to make the request.
     * @summary Return zip file with schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdExportFilePost(schemaId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Returns Hedera message IDs of the published schemas, these messages contain IPFS CIDs of these schema files. Only users with the Root Authority role are allowed to make the request.
     * @summary List Hedera message IDs of published schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdExportMessagePost(schemaId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ExportSchema>>;
    /**
     * Publishes the schema with the provided (internal) schema ID onto IPFS, sends a message featuring IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the schema.
     * @param {string} schemaId Schema ID.
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdPublishPut(schemaId: string, inlineObject: InlineObject, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Updates the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates the schema.
     * @param {string} schemaId Schema ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdPut(schemaId: string, schema: Schema, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Returns all schemas by topicId.
     * @summary Returns all schemas by topicId.
     * @param {string} topicId Topic ID.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdGet(topicId: string, pageIndex?: number | undefined, pageSize?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {string} topicId Topic ID.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdImportFilePost(topicId: string, body: any, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {string} topicId Topic ID.
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdImportMessagePost(topicId: string, inlineObject2: InlineObject2, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Schema>>>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {string} topicId Topic ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdPost(topicId: string, schema: Schema, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * SchemasApi - factory interface
 * @export
 */
export declare const SchemasApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns all schemas.
     * @summary Returns all schemas.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasGet(pageIndex?: number | undefined, pageSize?: number | undefined, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasImportFilePost(body: any, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Previews the schema from a zip file. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from a zip file.
     * @param {any} body A zip file containing the schema to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasImportFilePreviewPost(body: any, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasImportMessagePost(inlineObject1: InlineObject1, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Previews the schema from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from IPFS.
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasImportMessagePreviewPost(inlineObject3: InlineObject3, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    schemasPost(schema: Schema, options?: any): AxiosPromise<void>;
    /**
     * Deletes the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Deletes the schema.
     * @param {string} schemaId Schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdDelete(schemaId: string, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Returns schema files for the schemas. Only users with the Root Authority role are allowed to make the request.
     * @summary Return zip file with schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdExportFilePost(schemaId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns Hedera message IDs of the published schemas, these messages contain IPFS CIDs of these schema files. Only users with the Root Authority role are allowed to make the request.
     * @summary List Hedera message IDs of published schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdExportMessagePost(schemaId: string, options?: any): AxiosPromise<ExportSchema>;
    /**
     * Publishes the schema with the provided (internal) schema ID onto IPFS, sends a message featuring IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the schema.
     * @param {string} schemaId Schema ID.
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdPublishPut(schemaId: string, inlineObject: InlineObject, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Updates the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates the schema.
     * @param {string} schemaId Schema ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasSchemaIdPut(schemaId: string, schema: Schema, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Returns all schemas by topicId.
     * @summary Returns all schemas by topicId.
     * @param {string} topicId Topic ID.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdGet(topicId: string, pageIndex?: number | undefined, pageSize?: number | undefined, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {string} topicId Topic ID.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdImportFilePost(topicId: string, body: any, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {string} topicId Topic ID.
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdImportMessagePost(topicId: string, inlineObject2: InlineObject2, options?: any): AxiosPromise<Array<Schema>>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {string} topicId Topic ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schemasTopicIdPost(topicId: string, schema: Schema, options?: any): AxiosPromise<void>;
};
/**
 * SchemasApi - object-oriented interface
 * @export
 * @class SchemasApi
 * @extends {BaseAPI}
 */
export declare class SchemasApi extends BaseAPI {
    /**
     * Returns all schemas.
     * @summary Returns all schemas.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasGet(pageIndex?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasImportFilePost(body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Previews the schema from a zip file. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from a zip file.
     * @param {any} body A zip file containing the schema to be viewed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasImportFilePreviewPost(body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasImportMessagePost(inlineObject1: InlineObject1, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Previews the schema from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Schema preview from IPFS.
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasImportMessagePreviewPost(inlineObject3: InlineObject3, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasPost(schema: Schema, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Deletes the schema.
     * @param {string} schemaId Schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasSchemaIdDelete(schemaId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Returns schema files for the schemas. Only users with the Root Authority role are allowed to make the request.
     * @summary Return zip file with schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasSchemaIdExportFilePost(schemaId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns Hedera message IDs of the published schemas, these messages contain IPFS CIDs of these schema files. Only users with the Root Authority role are allowed to make the request.
     * @summary List Hedera message IDs of published schemas.
     * @param {string} schemaId Selected schema ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasSchemaIdExportMessagePost(schemaId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportSchema, any>>;
    /**
     * Publishes the schema with the provided (internal) schema ID onto IPFS, sends a message featuring IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.
     * @summary Publishes the schema.
     * @param {string} schemaId Schema ID.
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasSchemaIdPublishPut(schemaId: string, inlineObject: InlineObject, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Updates the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.
     * @summary Updates the schema.
     * @param {string} schemaId Schema ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasSchemaIdPut(schemaId: string, schema: Schema, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Returns all schemas by topicId.
     * @summary Returns all schemas by topicId.
     * @param {string} topicId Topic ID.
     * @param {number} [pageIndex] The number of pages to skip before starting to collect the result set
     * @param {number} [pageSize] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasTopicIdGet(topicId: string, pageIndex?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from a zip file.
     * @param {string} topicId Topic ID.
     * @param {any} body A zip file containing schema to be imported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasTopicIdImportFilePost(topicId: string, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.
     * @summary Imports new schema from IPFS.
     * @param {string} topicId Topic ID.
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasTopicIdImportMessagePost(topicId: string, inlineObject2: InlineObject2, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * Creates new schema. Only users with the Root Authority role are allowed to make the request.
     * @summary Create new schema.
     * @param {string} topicId Topic ID.
     * @param {Schema} schema Object that contains a valid schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    schemasTopicIdPost(topicId: string, schema: Schema, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export declare const SettingsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns current settings. For users with the Root Authority role only.
     * @summary Returns current settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set settings. For users with the Root Authority role only.
     * @summary Set settings.
     * @param {CommonSettings} commonSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsPost: (commonSettings: CommonSettings, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SettingsApi - functional programming interface
 * @export
 */
export declare const SettingsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns current settings. For users with the Root Authority role only.
     * @summary Returns current settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CommonSettings>>;
    /**
     * Set settings. For users with the Root Authority role only.
     * @summary Set settings.
     * @param {CommonSettings} commonSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsPost(commonSettings: CommonSettings, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * SettingsApi - factory interface
 * @export
 */
export declare const SettingsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns current settings. For users with the Root Authority role only.
     * @summary Returns current settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsGet(options?: any): AxiosPromise<CommonSettings>;
    /**
     * Set settings. For users with the Root Authority role only.
     * @summary Set settings.
     * @param {CommonSettings} commonSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsPost(commonSettings: CommonSettings, options?: any): AxiosPromise<void>;
};
/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export declare class SettingsApi extends BaseAPI {
    /**
     * Returns current settings. For users with the Root Authority role only.
     * @summary Returns current settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CommonSettings, any>>;
    /**
     * Set settings. For users with the Root Authority role only.
     * @summary Set settings.
     * @param {CommonSettings} commonSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    settingsPost(commonSettings: CommonSettings, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TokensApi - axios parameter creator
 * @export
 */
export declare const TokensApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns all tokens. For the Root Authority role it returns only the list of tokens, for other users it also returns token balances as well as the KYC, Freeze, and Association statuses. Not allowed for the Auditor role.
     * @summary Return a list of tokens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new token. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new token.
     * @param {Token} token Object that contains token information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensPost: (token: Token, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Associates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associates the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdAssociatePut: (tokenId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Disassociates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associate the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdDissociatePut: (tokenId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Freezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Freeze transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameFreezePut: (tokenId: string, username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Sets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameGrantKycPut: (tokenId: string, username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns user information for the selected token. Only users with the Root Authority role are allowed to make the request.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameInfoGet: (tokenId: string, username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unsets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unsets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameRevokeKycPut: (tokenId: string, username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unfreezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unfreezes transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameUnfreezePut: (tokenId: string, username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokensApi - functional programming interface
 * @export
 */
export declare const TokensApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns all tokens. For the Root Authority role it returns only the list of tokens, for other users it also returns token balances as well as the KYC, Freeze, and Association statuses. Not allowed for the Auditor role.
     * @summary Return a list of tokens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<TokenInfo & object>>>;
    /**
     * Creates a new token. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new token.
     * @param {Token} token Object that contains token information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensPost(token: Token, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<TokenInfo & object>>>;
    /**
     * Associates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associates the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdAssociatePut(tokenId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Disassociates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associate the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdDissociatePut(tokenId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Freezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Freeze transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameFreezePut(tokenId: string, username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TokenInfo>>;
    /**
     * Sets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Sets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameGrantKycPut(tokenId: string, username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TokenInfo>>;
    /**
     * Returns user information for the selected token. Only users with the Root Authority role are allowed to make the request.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameInfoGet(tokenId: string, username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TokenInfo>>;
    /**
     * Unsets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unsets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameRevokeKycPut(tokenId: string, username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TokenInfo>>;
    /**
     * Unfreezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unfreezes transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameUnfreezePut(tokenId: string, username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TokenInfo>>;
};
/**
 * TokensApi - factory interface
 * @export
 */
export declare const TokensApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns all tokens. For the Root Authority role it returns only the list of tokens, for other users it also returns token balances as well as the KYC, Freeze, and Association statuses. Not allowed for the Auditor role.
     * @summary Return a list of tokens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensGet(options?: any): AxiosPromise<Array<TokenInfo & object>>;
    /**
     * Creates a new token. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new token.
     * @param {Token} token Object that contains token information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensPost(token: Token, options?: any): AxiosPromise<Array<TokenInfo & object>>;
    /**
     * Associates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associates the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdAssociatePut(tokenId: string, options?: any): AxiosPromise<void>;
    /**
     * Disassociates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associate the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdDissociatePut(tokenId: string, options?: any): AxiosPromise<void>;
    /**
     * Freezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Freeze transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameFreezePut(tokenId: string, username: string, options?: any): AxiosPromise<TokenInfo>;
    /**
     * Sets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Sets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameGrantKycPut(tokenId: string, username: string, options?: any): AxiosPromise<TokenInfo>;
    /**
     * Returns user information for the selected token. Only users with the Root Authority role are allowed to make the request.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameInfoGet(tokenId: string, username: string, options?: any): AxiosPromise<TokenInfo>;
    /**
     * Unsets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unsets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameRevokeKycPut(tokenId: string, username: string, options?: any): AxiosPromise<TokenInfo>;
    /**
     * Unfreezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unfreezes transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensTokenIdUsernameUnfreezePut(tokenId: string, username: string, options?: any): AxiosPromise<TokenInfo>;
};
/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export declare class TokensApi extends BaseAPI {
    /**
     * Returns all tokens. For the Root Authority role it returns only the list of tokens, for other users it also returns token balances as well as the KYC, Freeze, and Association statuses. Not allowed for the Auditor role.
     * @summary Return a list of tokens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<(TokenInfo & object)[], any>>;
    /**
     * Creates a new token. Only users with the Root Authority role are allowed to make the request.
     * @summary Creates a new token.
     * @param {Token} token Object that contains token information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensPost(token: Token, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<(TokenInfo & object)[], any>>;
    /**
     * Associates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associates the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensTokenIdAssociatePut(tokenId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Disassociates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.
     * @summary Associate the user with the provided Hedera token.
     * @param {string} tokenId Token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensTokenIdDissociatePut(tokenId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Freezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Freeze transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensTokenIdUsernameFreezePut(tokenId: string, username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenInfo, any>>;
    /**
     * Sets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Sets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensTokenIdUsernameGrantKycPut(tokenId: string, username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenInfo, any>>;
    /**
     * Returns user information for the selected token. Only users with the Root Authority role are allowed to make the request.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensTokenIdUsernameInfoGet(tokenId: string, username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenInfo, any>>;
    /**
     * Unsets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unsets the KYC flag for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensTokenIdUsernameRevokeKycPut(tokenId: string, username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenInfo, any>>;
    /**
     * Unfreezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.
     * @summary Unfreezes transfers of the specified token for the user.
     * @param {string} tokenId Token ID.
     * @param {string} username Username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    tokensTokenIdUsernameUnfreezePut(tokenId: string, username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenInfo, any>>;
}
/**
 * TrustchainsApi - axios parameter creator
 * @export
 */
export declare const TrustchainsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Requests all VP documents. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a list of all VP documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustchainsGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Builds and returns a trustchain, from the VP to the root VC document. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a trustchain for a VP document.
     * @param {string} hash Hash or ID of a VP document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustchainsHashGet: (hash: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TrustchainsApi - functional programming interface
 * @export
 */
export declare const TrustchainsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Requests all VP documents. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a list of all VP documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustchainsGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<VerifiablePresentation>>>;
    /**
     * Builds and returns a trustchain, from the VP to the root VC document. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a trustchain for a VP document.
     * @param {string} hash Hash or ID of a VP document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustchainsHashGet(hash: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TrustChains>>;
};
/**
 * TrustchainsApi - factory interface
 * @export
 */
export declare const TrustchainsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Requests all VP documents. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a list of all VP documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustchainsGet(options?: any): AxiosPromise<Array<VerifiablePresentation>>;
    /**
     * Builds and returns a trustchain, from the VP to the root VC document. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a trustchain for a VP document.
     * @param {string} hash Hash or ID of a VP document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustchainsHashGet(hash: string, options?: any): AxiosPromise<TrustChains>;
};
/**
 * TrustchainsApi - object-oriented interface
 * @export
 * @class TrustchainsApi
 * @extends {BaseAPI}
 */
export declare class TrustchainsApi extends BaseAPI {
    /**
     * Requests all VP documents. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a list of all VP documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrustchainsApi
     */
    trustchainsGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VerifiablePresentation[], any>>;
    /**
     * Builds and returns a trustchain, from the VP to the root VC document. Only users with the Auditor role are allowed to make the request.
     * @summary Returns a trustchain for a VP document.
     * @param {string} hash Hash or ID of a VP document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrustchainsApi
     */
    trustchainsHashGet(hash: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustChains, any>>;
}
